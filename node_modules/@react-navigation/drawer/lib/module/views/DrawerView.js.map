{"version":3,"sources":["DrawerView.tsx"],"names":["getHeaderTitle","Header","SafeAreaProviderCompat","Screen","DrawerActions","useTheme","React","BackHandler","I18nManager","Platform","StyleSheet","View","Animated","useSafeAreaFrame","DrawerPositionContext","DrawerStatusContext","getDrawerStatusFromState","DrawerContent","DrawerToggleButton","GestureHandlerRootView","MaybeScreen","MaybeScreenContainer","getDefaultDrawerWidth","height","width","smallerAxisSize","Math","min","isLandscape","isTablet","appBarHeight","OS","maxWidth","GestureHandlerWrapper","DrawerViewBase","state","navigation","descriptors","drawerContent","props","detachInactiveScreens","useLegacyImplementation","global","nativeCallSyncHook","isConfigured","Drawer","require","default","focusedRouteKey","routes","index","key","drawerHideStatusBarOnOpen","drawerPosition","isRTL","drawerStatusBarAnimation","drawerStyle","drawerType","select","ios","gestureHandlerProps","keyboardDismissMode","overlayColor","swipeEdgeWidth","swipeEnabled","swipeMinDistance","options","loaded","setLoaded","useState","includes","dimensions","colors","drawerStatus","handleDrawerOpen","useCallback","dispatch","openDrawer","target","handleDrawerClose","closeDrawer","useEffect","handleClose","isFocused","handleEscape","e","subscription","addEventListener","document","body","remove","removeEventListener","renderDrawerContent","renderSceneContent","styles","content","map","route","descriptor","lazy","unmountOnBlur","header","layout","name","headerLeft","sceneContainerStyle","absoluteFill","zIndex","headerShown","headerStatusBarHeight","render","backgroundColor","card","borderRightColor","border","borderRightWidth","hairlineWidth","borderLeftColor","borderLeftWidth","DrawerView","rest","create","flex"],"mappings":"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","sourcesContent":["import {\n  getHeaderTitle,\n  Header,\n  SafeAreaProviderCompat,\n  Screen,\n} from '@react-navigation/elements';\nimport {\n  DrawerActions,\n  DrawerNavigationState,\n  ParamListBase,\n  useTheme,\n} from '@react-navigation/native';\nimport * as React from 'react';\nimport {\n  BackHandler,\n  I18nManager,\n  Platform,\n  StyleSheet,\n  View,\n} from 'react-native';\nimport Animated from 'react-native-reanimated';\nimport { useSafeAreaFrame } from 'react-native-safe-area-context';\n\nimport type {\n  DrawerContentComponentProps,\n  DrawerDescriptorMap,\n  DrawerHeaderProps,\n  DrawerNavigationConfig,\n  DrawerNavigationHelpers,\n  DrawerNavigationProp,\n  DrawerProps,\n} from '../types';\nimport DrawerPositionContext from '../utils/DrawerPositionContext';\nimport DrawerStatusContext from '../utils/DrawerStatusContext';\nimport getDrawerStatusFromState from '../utils/getDrawerStatusFromState';\nimport DrawerContent from './DrawerContent';\nimport DrawerToggleButton from './DrawerToggleButton';\nimport { GestureHandlerRootView } from './GestureHandler';\nimport { MaybeScreen, MaybeScreenContainer } from './ScreenFallback';\n\ntype Props = DrawerNavigationConfig & {\n  state: DrawerNavigationState<ParamListBase>;\n  navigation: DrawerNavigationHelpers;\n  descriptors: DrawerDescriptorMap;\n};\n\nconst getDefaultDrawerWidth = ({\n  height,\n  width,\n}: {\n  height: number;\n  width: number;\n}) => {\n  /*\n   * Default drawer width is screen width - header height\n   * with a max width of 280 on mobile and 320 on tablet\n   * https://material.io/components/navigation-drawer\n   */\n  const smallerAxisSize = Math.min(height, width);\n  const isLandscape = width > height;\n  const isTablet = smallerAxisSize >= 600;\n  const appBarHeight = Platform.OS === 'ios' ? (isLandscape ? 32 : 44) : 56;\n  const maxWidth = isTablet ? 320 : 280;\n\n  return Math.min(smallerAxisSize - appBarHeight, maxWidth);\n};\n\nconst GestureHandlerWrapper = GestureHandlerRootView ?? View;\n\nfunction DrawerViewBase({\n  state,\n  navigation,\n  descriptors,\n  drawerContent = (props: DrawerContentComponentProps) => (\n    <DrawerContent {...props} />\n  ),\n  detachInactiveScreens = Platform.OS === 'web' ||\n    Platform.OS === 'android' ||\n    Platform.OS === 'ios',\n  // Running in chrome debugger\n  // @ts-expect-error\n  useLegacyImplementation = !global.nativeCallSyncHook ||\n    // Reanimated 2 is not configured\n    // @ts-expect-error: the type definitions are incomplete\n    !Animated.isConfigured?.(),\n}: Props) {\n  const Drawer: React.ComponentType<DrawerProps> = useLegacyImplementation\n    ? require('./legacy/Drawer').default\n    : require('./modern/Drawer').default;\n\n  const focusedRouteKey = state.routes[state.index].key;\n  const {\n    drawerHideStatusBarOnOpen = false,\n    drawerPosition = I18nManager.isRTL ? 'right' : 'left',\n    drawerStatusBarAnimation = 'slide',\n    drawerStyle,\n    drawerType = Platform.select({ ios: 'slide', default: 'front' }),\n    gestureHandlerProps,\n    keyboardDismissMode = 'on-drag',\n    overlayColor = 'rgba(0, 0, 0, 0.5)',\n    swipeEdgeWidth = 32,\n    swipeEnabled = Platform.OS !== 'web' &&\n      Platform.OS !== 'windows' &&\n      Platform.OS !== 'macos',\n    swipeMinDistance = 60,\n  } = descriptors[focusedRouteKey].options;\n\n  const [loaded, setLoaded] = React.useState([focusedRouteKey]);\n\n  if (!loaded.includes(focusedRouteKey)) {\n    setLoaded([...loaded, focusedRouteKey]);\n  }\n\n  const dimensions = useSafeAreaFrame();\n\n  const { colors } = useTheme();\n\n  const drawerStatus = getDrawerStatusFromState(state);\n\n  const handleDrawerOpen = React.useCallback(() => {\n    navigation.dispatch({\n      ...DrawerActions.openDrawer(),\n      target: state.key,\n    });\n  }, [navigation, state.key]);\n\n  const handleDrawerClose = React.useCallback(() => {\n    navigation.dispatch({\n      ...DrawerActions.closeDrawer(),\n      target: state.key,\n    });\n  }, [navigation, state.key]);\n\n  React.useEffect(() => {\n    if (drawerStatus !== 'open' || drawerType === 'permanent') {\n      return;\n    }\n\n    const handleClose = () => {\n      // We shouldn't handle the back button if the parent screen isn't focused\n      // This will avoid the drawer overriding event listeners from a focused screen\n      if (!navigation.isFocused()) {\n        return false;\n      }\n\n      handleDrawerClose();\n\n      return true;\n    };\n\n    const handleEscape = (e: KeyboardEvent) => {\n      if (e.key === 'Escape') {\n        handleClose();\n      }\n    };\n\n    // We only add the listeners when drawer opens\n    // This way we can make sure that the listener is added as late as possible\n    // This will make sure that our handler will run first when back button is pressed\n    const subscription = BackHandler.addEventListener(\n      'hardwareBackPress',\n      handleClose\n    );\n\n    if (Platform.OS === 'web') {\n      document?.body?.addEventListener?.('keyup', handleEscape);\n    }\n\n    return () => {\n      subscription.remove();\n\n      if (Platform.OS === 'web') {\n        document?.body?.removeEventListener?.('keyup', handleEscape);\n      }\n    };\n  }, [drawerStatus, drawerType, handleDrawerClose, navigation]);\n\n  const renderDrawerContent = () => {\n    return (\n      <DrawerPositionContext.Provider value={drawerPosition}>\n        {drawerContent({\n          state: state,\n          navigation: navigation,\n          descriptors: descriptors,\n        })}\n      </DrawerPositionContext.Provider>\n    );\n  };\n\n  const renderSceneContent = () => {\n    return (\n      <MaybeScreenContainer\n        enabled={detachInactiveScreens}\n        style={styles.content}\n      >\n        {state.routes.map((route, index) => {\n          const descriptor = descriptors[route.key];\n          const { lazy = true, unmountOnBlur } = descriptor.options;\n          const isFocused = state.index === index;\n\n          if (unmountOnBlur && !isFocused) {\n            return null;\n          }\n\n          if (lazy && !loaded.includes(route.key) && !isFocused) {\n            // Don't render a lazy screen if we've never navigated to it\n            return null;\n          }\n\n          const {\n            header = ({ layout, options }: DrawerHeaderProps) => (\n              <Header\n                {...options}\n                layout={layout}\n                title={getHeaderTitle(options, route.name)}\n                headerLeft={\n                  options.headerLeft ??\n                  ((props) => <DrawerToggleButton {...props} />)\n                }\n              />\n            ),\n            sceneContainerStyle,\n          } = descriptor.options;\n\n          return (\n            <MaybeScreen\n              key={route.key}\n              style={[StyleSheet.absoluteFill, { zIndex: isFocused ? 0 : -1 }]}\n              visible={isFocused}\n              enabled={detachInactiveScreens}\n            >\n              <Screen\n                focused={isFocused}\n                route={descriptor.route}\n                navigation={descriptor.navigation}\n                headerShown={descriptor.options.headerShown}\n                headerStatusBarHeight={descriptor.options.headerStatusBarHeight}\n                header={header({\n                  layout: dimensions,\n                  route: descriptor.route,\n                  navigation:\n                    descriptor.navigation as DrawerNavigationProp<ParamListBase>,\n                  options: descriptor.options,\n                })}\n                style={sceneContainerStyle}\n              >\n                {descriptor.render()}\n              </Screen>\n            </MaybeScreen>\n          );\n        })}\n      </MaybeScreenContainer>\n    );\n  };\n\n  return (\n    <DrawerStatusContext.Provider value={drawerStatus}>\n      <Drawer\n        open={drawerStatus !== 'closed'}\n        onOpen={handleDrawerOpen}\n        onClose={handleDrawerClose}\n        gestureHandlerProps={gestureHandlerProps}\n        swipeEnabled={swipeEnabled}\n        swipeEdgeWidth={swipeEdgeWidth}\n        swipeVelocityThreshold={500}\n        swipeDistanceThreshold={swipeMinDistance}\n        hideStatusBarOnOpen={drawerHideStatusBarOnOpen}\n        statusBarAnimation={drawerStatusBarAnimation}\n        keyboardDismissMode={keyboardDismissMode}\n        drawerType={drawerType}\n        drawerPosition={drawerPosition}\n        drawerStyle={[\n          {\n            width: getDefaultDrawerWidth(dimensions),\n            backgroundColor: colors.card,\n          },\n          drawerType === 'permanent' &&\n            (drawerPosition === 'left'\n              ? {\n                  borderRightColor: colors.border,\n                  borderRightWidth: StyleSheet.hairlineWidth,\n                }\n              : {\n                  borderLeftColor: colors.border,\n                  borderLeftWidth: StyleSheet.hairlineWidth,\n                }),\n          drawerStyle,\n        ]}\n        overlayStyle={{ backgroundColor: overlayColor }}\n        renderDrawerContent={renderDrawerContent}\n        renderSceneContent={renderSceneContent}\n        dimensions={dimensions}\n      />\n    </DrawerStatusContext.Provider>\n  );\n}\n\nexport default function DrawerView({ navigation, ...rest }: Props) {\n  return (\n    <SafeAreaProviderCompat>\n      <GestureHandlerWrapper style={styles.content}>\n        <DrawerViewBase navigation={navigation} {...rest} />\n      </GestureHandlerWrapper>\n    </SafeAreaProviderCompat>\n  );\n}\n\nconst styles = StyleSheet.create({\n  content: {\n    flex: 1,\n  },\n});\n"]}