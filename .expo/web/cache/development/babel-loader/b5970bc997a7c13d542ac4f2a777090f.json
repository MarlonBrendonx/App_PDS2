{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/home/user/Documentos/Git/App_PDS2/src/view/Index/CommunityHouse/index.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport Image from \"react-native-web/dist/exports/Image\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport { Picker } from '@react-native-community/picker';\nimport styles from \"./styles\";\nimport Modal from 'react-native-modal';\nimport { Entypo } from \"@expo/vector-icons\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport EventBody from \"../../../components/EventBody\";\nimport Header from \"../../../components/Header\";\nimport Sv from \"../../../assets/avatar.jpg\";\nimport { SvgUri } from 'react-native-svg';\nimport { BackgroundImage } from 'react-native-elements/dist/config';\nimport { Ionicons } from \"@expo/vector-icons\";\nimport * as ImagePicker from 'expo-image-picker';\nimport Api from \"../../Apis/Map/Api\";\n\nfunction CommunityHouse(_ref) {\n  var route = _ref.route,\n      navigation = _ref.navigation;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      selectedImage = _useState2[0],\n      setSelectedImage = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      information = _useState4[0],\n      setInformation = _useState4[1];\n\n  var _route$params = route.params,\n      coordinate = _route$params.coordinate,\n      type = _route$params.type;\n\n  var handleRegisterButtonClick = function handleRegisterButtonClick() {\n    return _regeneratorRuntime.async(function handleRegisterButtonClick$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (information != '' && coordinate != null && person.id != '') {\n              alert(information);\n            }\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var openImagePickerAsync = function openImagePickerAsync() {\n    var permissionResult, pickerResult, count;\n    return _regeneratorRuntime.async(function openImagePickerAsync$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(ImagePicker.requestMediaLibraryPermissionsAsync());\n\n          case 2:\n            permissionResult = _context2.sent;\n\n            if (!(permissionResult.granted === false)) {\n              _context2.next = 6;\n              break;\n            }\n\n            alert(\"É necessário dar permissão para acessar a galeria\");\n            return _context2.abrupt(\"return\");\n\n          case 6:\n            _context2.next = 8;\n            return _regeneratorRuntime.awrap(ImagePicker.launchImageLibraryAsync());\n\n          case 8:\n            pickerResult = _context2.sent;\n\n            if (!(pickerResult.cancelled === true)) {\n              _context2.next = 11;\n              break;\n            }\n\n            return _context2.abrupt(\"return\");\n\n          case 11:\n            count = \"localUri\" + selectedImage.length;\n            setSelectedImage(function (selectedImage) {\n              return [].concat(_toConsumableArray(selectedImage), [{\n                count: pickerResult.uri\n              }]);\n            });\n            console.log(selectedImage.length);\n\n          case 14:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var _useState5 = useState(\"java\"),\n      _useState6 = _slicedToArray(_useState5, 2),\n      selectedValue = _useState6[0],\n      setSelectedValue = _useState6[1];\n\n  return React.createElement(View, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }\n  }, React.createElement(Header, {\n    navigation: navigation,\n    title: \"Casinhas comunit\\xE1rias\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 15\n    }\n  }), React.createElement(ScrollView, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 15\n    }\n  }, React.createElement(EventBody, {\n    color: \"#5cc5c0\",\n    onPress: handleRegisterButtonClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 17\n    }\n  })));\n}\n\nexport default CommunityHouse;","map":{"version":3,"sources":["/home/user/Documentos/Git/App_PDS2/src/view/Index/CommunityHouse/index.js"],"names":["React","useState","useEffect","useRef","Picker","styles","Modal","Entypo","EventBody","Header","Sv","SvgUri","BackgroundImage","Ionicons","ImagePicker","Api","CommunityHouse","route","navigation","selectedImage","setSelectedImage","information","setInformation","params","coordinate","type","handleRegisterButtonClick","person","id","alert","openImagePickerAsync","requestMediaLibraryPermissionsAsync","permissionResult","granted","launchImageLibraryAsync","pickerResult","cancelled","count","length","uri","console","log","selectedValue","setSelectedValue","container"],"mappings":"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","sourcesContent":["import React, { useState, useEffect,useRef } from 'react';\nimport { Image,View,Button,Text,TouchableOpacity, TextInput } from 'react-native';\nimport { Picker } from '@react-native-community/picker';\nimport styles from \"./styles\";\nimport Modal from 'react-native-modal';\nimport { Entypo } from \"@expo/vector-icons\";\nimport { ScrollView } from 'react-native';\nimport EventBody from '../../../components/EventBody';\nimport Header from \"../../../components/Header\"; \nimport Sv from '../../../assets/avatar.jpg';          // SVG File\nimport { SvgUri } from 'react-native-svg';\nimport { BackgroundImage } from 'react-native-elements/dist/config';\nimport { Ionicons } from \"@expo/vector-icons\";\nimport * as ImagePicker from 'expo-image-picker';\nimport Api from \"../../Apis/Map/Api\";\n\n\nfunction CommunityHouse({route,navigation }) {\n\n   \n    const [selectedImage, setSelectedImage] = useState([]);\n    const [information,setInformation] = useState(null);\n    const { coordinate,type }= route.params;\n\n    const handleRegisterButtonClick = async() =>{\n\n      if(  information != '' && coordinate != null  && person.id != '' ){\n\n          \n         alert(information);\n\n      }\n\n   }\n\n\n\n    let openImagePickerAsync = async () => {\n        let permissionResult = await ImagePicker.requestMediaLibraryPermissionsAsync();\n    \n        if (permissionResult.granted === false) {\n          alert(\"É necessário dar permissão para acessar a galeria\");\n          return;\n        }\n    \n        let pickerResult = await ImagePicker.launchImageLibraryAsync();\n\n        if (pickerResult.cancelled === true) {\n            return;\n        }\n        const count=\"localUri\"+selectedImage.length;\n\n        setSelectedImage((selectedImage)=>[...selectedImage,{ count: pickerResult.uri }]);\n        console.log(selectedImage.length);\n\n    }\n    const [selectedValue, setSelectedValue] = useState(\"java\");\n    return(\n      \n            <View style={ styles.container }>\n              <Header navigation={navigation} title=\"Casinhas comunitárias\" />\n              <ScrollView >\n                <EventBody color=\"#5cc5c0\" onPress={handleRegisterButtonClick}/>\n              </ScrollView>        \n           </View>         \n    );\n}\nexport default CommunityHouse;"]},"metadata":{},"sourceType":"module"}