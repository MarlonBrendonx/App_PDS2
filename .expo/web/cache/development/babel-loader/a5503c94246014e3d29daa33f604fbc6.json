{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/home/user/Documentos/Git/App_PDS2/src/view/Index/ProfileFields/index.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useEffect, useContext } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport styles from \"./styles\";\nimport { Text } from 'react-native-elements';\nimport Header from \"../../../components/Header\";\nimport { AsyncStorage } from \"react-native-web/dist/index\";\nimport Api from \"../../Apis/User/Api\";\nimport { UserContext } from \"../../../context/UserContext\";\n\nfunction ProfileField(_ref) {\n  var route = _ref.route,\n      navigation = _ref.navigation;\n  var _route$params = route.params,\n      title = _route$params.title,\n      type = _route$params.type,\n      field = _route$params.field,\n      plcholder = _route$params.plcholder;\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      strfield = _useState2[0],\n      setField = _useState2[1];\n\n  var _useContext = useContext(UserContext),\n      userDispatch = _useContext.dispatch;\n\n  var handleLoginButtonClick = function handleLoginButtonClick() {\n    var token, json;\n    return _regeneratorRuntime.async(function handleLoginButtonClick$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(field != '')) {\n              _context.next = 10;\n              break;\n            }\n\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(AsyncStorage.getItem('token'));\n\n          case 3:\n            token = _context.sent;\n            _context.next = 6;\n            return _regeneratorRuntime.awrap(Api.Update(strfield, field, token));\n\n          case 6:\n            json = _context.sent;\n\n            if (json.status) {\n              alert(\"O campo foi alterado com sucesso!\");\n              userDispatch({\n                type: type,\n                payload: {\n                  name: strfield\n                }\n              });\n            } else {\n              alert(\"Erro ao alterar o campo!\");\n            }\n\n            _context.next = 11;\n            break;\n\n          case 10:\n            alert(\"O campo esta vazio!\");\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return React.createElement(View, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }\n  }, React.createElement(Header, {\n    navigation: navigation,\n    title: title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 17\n    }\n  }), React.createElement(View, {\n    style: styles.body,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 17\n    }\n  }, React.createElement(TextInput, {\n    style: styles.inputText,\n    placeholder: plcholder,\n    underlineColorAndroid: \"transparent\",\n    onChangeText: function onChangeText(t) {\n      return setField(t);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 17\n    }\n  }), React.createElement(TouchableOpacity, {\n    style: styles.btnChange,\n    onPress: handleLoginButtonClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 17\n    }\n  }, React.createElement(Text, {\n    style: {\n      color: \"#FFF\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 21\n    }\n  }, \" Alterar \"))));\n}\n\nexport default ProfileField;","map":{"version":3,"sources":["/home/user/Documentos/Git/App_PDS2/src/view/Index/ProfileFields/index.js"],"names":["React","useState","useEffect","useContext","styles","Text","Header","AsyncStorage","Api","UserContext","ProfileField","route","navigation","params","title","type","field","plcholder","strfield","setField","userDispatch","dispatch","handleLoginButtonClick","getItem","token","Update","json","status","alert","payload","name","container","body","inputText","t","btnChange","color"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAAyBC,SAAzB,EAAmCC,UAAnC,QAAoD,OAApD;;;;AAEA,OAAOC,MAAP;AACA,SAASC,IAAT,QAAsB,uBAAtB;AACA,OAAOC,MAAP;SACSC,Y;AACT,OAAOC,GAAP;AACA,SAAQC,WAAR;;AAGA,SAASC,YAAT,OAAyC;AAAA,MAAlBC,KAAkB,QAAlBA,KAAkB;AAAA,MAAZC,UAAY,QAAZA,UAAY;AAEjC,sBAAyCD,KAAK,CAACE,MAA/C;AAAA,MAAQC,KAAR,iBAAQA,KAAR;AAAA,MAAeC,IAAf,iBAAeA,IAAf;AAAA,MAAqBC,KAArB,iBAAqBA,KAArB;AAAA,MAA4BC,SAA5B,iBAA4BA,SAA5B;;AACA,kBAA4BhB,QAAQ,CAAC,IAAD,CAApC;AAAA;AAAA,MAAOiB,QAAP;AAAA,MAAgBC,QAAhB;;AAEA,oBAA+BhB,UAAU,CAACM,WAAD,CAAzC;AAAA,MAAgBW,YAAhB,eAAOC,QAAP;;AAEA,MAAMC,sBAAsB,GAAG,SAAzBA,sBAAyB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEvBN,KAAK,IAAI,EAFc;AAAA;AAAA;AAAA;;AAAA;AAAA,6CAIFT,YAAY,CAACgB,OAAb,CAAqB,OAArB,CAJE;;AAAA;AAIfC,YAAAA,KAJe;AAAA;AAAA,6CAKLhB,GAAG,CAACiB,MAAJ,CAAWP,QAAX,EAAoBF,KAApB,EAA0BQ,KAA1B,CALK;;AAAA;AAKjBE,YAAAA,IALiB;;AAOrB,gBAAIA,IAAI,CAACC,MAAT,EAAiB;AAEbC,cAAAA,KAAK,CAAC,mCAAD,CAAL;AAEAR,cAAAA,YAAY,CAAC;AACXL,gBAAAA,IAAI,EAACA,IADM;AAEXc,gBAAAA,OAAO,EAAC;AACJC,kBAAAA,IAAI,EAACZ;AADD;AAFG,eAAD,CAAZ;AAQH,aAZD,MAYK;AAEDU,cAAAA,KAAK,CAAC,0BAAD,CAAL;AAEH;;AAvBoB;AAAA;;AAAA;AA2BrBA,YAAAA,KAAK,CAAC,qBAAD,CAAL;;AA3BqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA/B;;AAgCA,SACI,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAGxB,MAAM,CAAC2B,SAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEI,oBAAC,MAAD;AAAQ,IAAA,UAAU,EAAEnB,UAApB;AAAgC,IAAA,KAAK,EAAEE,KAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,EAII,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAGV,MAAM,CAAC4B,IAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEA,oBAAC,SAAD;AACI,IAAA,KAAK,EAAE5B,MAAM,CAAC6B,SADlB;AAEI,IAAA,WAAW,EAAEhB,SAFjB;AAGI,IAAA,qBAAqB,EAAC,aAH1B;AAII,IAAA,YAAY,EAAG,sBAAAiB,CAAC;AAAA,aAAIf,QAAQ,CAACe,CAAD,CAAZ;AAAA,KAJpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFA,EASA,oBAAC,gBAAD;AAAkB,IAAA,KAAK,EAAG9B,MAAM,CAAC+B,SAAjC;AAA6C,IAAA,OAAO,EAAEb,sBAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE;AAAGc,MAAAA,KAAK,EAAC;AAAT,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADJ,CATA,CAJJ,CADJ;AAwBP;;AAED,eAAe1B,YAAf","sourcesContent":["import React, { useState,useEffect,useContext} from 'react';\nimport { View,TextInput,TouchableOpacity} from 'react-native';\nimport styles from './styles';\nimport { Text  } from 'react-native-elements';\nimport Header from \"../../../components/Header\"\nimport { AsyncStorage } from 'react-native';\nimport Api from \"../../Apis/User/Api\";\nimport {UserContext} from '../../../context/UserContext';\n\n\nfunction ProfileField({route,navigation}){\n\n        const { title, type, field, plcholder} = route.params;\n        const [strfield,setField] = useState(null);\n\n        const {dispatch:userDispatch} =useContext(UserContext);\n\n        const handleLoginButtonClick = async() =>{\n\n            if( field != ''  ){\n\n                  const token= await AsyncStorage.getItem('token');\n                  let json= await Api.Update(strfield,field,token);\n                  \n                  if( json.status ){\n                    \n                      alert(\"O campo foi alterado com sucesso!\");\n\n                      userDispatch({\n                        type:type,\n                        payload:{\n                            name:strfield\n                        },\n                        \n                      });\n                      \n                  }else{\n\n                      alert(\"Erro ao alterar o campo!\"); \n                      \n                  }\n\n            }else{\n\n                  alert(\"O campo esta vazio!\");\n            }\n              \n         };\n\n        return (\n            <View style={ styles.container }>\n            \n                <Header navigation={navigation} title={title} />\n\n                <View style={ styles.body }>\n\n                <TextInput\n                    style={styles.inputText }\n                    placeholder={plcholder}\n                    underlineColorAndroid=\"transparent\"\n                    onChangeText={ t => setField(t) }\n                />\n                \n                <TouchableOpacity style={ styles.btnChange } onPress={handleLoginButtonClick}>\n                    <Text style={{  color:\"#FFF\" }}> Alterar </Text>\n                </TouchableOpacity>\n               \n                </View>\n\n            </View>\n        );\n\n\n}\n\nexport default ProfileField;"]},"metadata":{},"sourceType":"module"}