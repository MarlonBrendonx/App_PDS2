{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/home/user/Documentos/Git/App_PDS2/src/components/EventBody/index.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport Image from \"react-native-web/dist/exports/Image\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport { Picker } from '@react-native-community/picker';\nimport styles from \"./styles\";\nimport Modal from 'react-native-modal';\nimport { Entypo } from \"@expo/vector-icons\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport { BackgroundImage } from 'react-native-elements/dist/config';\nimport { Ionicons } from \"@expo/vector-icons\";\nimport * as ImagePicker from 'expo-image-picker';\n\nfunction EventBody(props) {\n  var _this = this;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      selectedImage = _useState2[0],\n      setSelectedImage = _useState2[1];\n\n  var openImagePickerAsync = function openImagePickerAsync() {\n    var permissionResult, pickerResult, count;\n    return _regeneratorRuntime.async(function openImagePickerAsync$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(ImagePicker.requestMediaLibraryPermissionsAsync());\n\n          case 2:\n            permissionResult = _context.sent;\n\n            if (!(permissionResult.granted === false)) {\n              _context.next = 6;\n              break;\n            }\n\n            alert(\"É necessário dar permissão para acessar a galeria\");\n            return _context.abrupt(\"return\");\n\n          case 6:\n            _context.next = 8;\n            return _regeneratorRuntime.awrap(ImagePicker.launchImageLibraryAsync());\n\n          case 8:\n            pickerResult = _context.sent;\n\n            if (!(pickerResult.cancelled === true)) {\n              _context.next = 11;\n              break;\n            }\n\n            return _context.abrupt(\"return\");\n\n          case 11:\n            count = \"localUri\" + selectedImage.length;\n            setSelectedImage(function (selectedImage) {\n              return [].concat(_toConsumableArray(selectedImage), [{\n                count: pickerResult.uri\n              }]);\n            });\n            console.log(selectedImage.length);\n\n          case 14:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var _useState3 = useState(\"java\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      selectedValue = _useState4[0],\n      setSelectedValue = _useState4[1];\n\n  return React.createElement(BackgroundImage, {\n    source: require(\"../../assets/LostPet/walpaper2.png\"),\n    style: styles(props).wlpBackground,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 15\n    }\n  }, React.createElement(View, {\n    style: {\n      backgroundColor: 'rgba(255, 255, 255, 0.90)',\n      flex: 1\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 17\n    }\n  }, React.createElement(View, {\n    style: styles(props).titles,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 19\n    }\n  }, React.createElement(Text, {\n    style: styles(props).txtTitle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 21\n    }\n  }, \"Preencha as informa\\xE7\\xF5es do\"), React.createElement(Text, {\n    style: styles(props).txtTitle2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 21\n    }\n  }, \"Evento!\")), React.createElement(View, {\n    style: styles(props).body,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 19\n    }\n  }, React.createElement(Text, {\n    style: styles(props).txtOption,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 21\n    }\n  }, \"Informa\\xE7\\xF5es\"), React.createElement(TextInput, {\n    style: styles(props).textArea,\n    underlineColorAndroid: \"transparent\",\n    placeholder: \"Informe alguns detalhes \",\n    placeholderTextColor: \"grey\",\n    numberOfLines: 10,\n    multiline: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 21\n    }\n  }), React.createElement(TouchableOpacity, {\n    style: styles(props).btnAddPhoto,\n    onPress: openImagePickerAsync,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 21\n    }\n  }, React.createElement(Image, {\n    style: {\n      height: 24,\n      width: 24\n    },\n    source: require(\"../../assets/Events/camera.png\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 23\n    }\n  })), React.createElement(View, {\n    style: styles(props).containerImage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 21\n    }\n  }, React.createElement(ScrollView, {\n    horizontal: true,\n    style: {\n      width: '94%'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 23\n    }\n  }, selectedImage.map(function (localUri) {\n    return React.createElement(Image, {\n      style: styles(props).imgsContainer,\n      key: localUri.count,\n      source: {\n        uri: localUri.count\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 25\n      }\n    });\n  }))), React.createElement(TouchableOpacity, {\n    style: styles(props).btnAddEvent,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 23\n    }\n  }, React.createElement(Text, {\n    style: {\n      color: 'white'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 25\n    }\n  }, \"Adicionar evento\"), React.createElement(Image, {\n    style: styles(props).iconButtonsubmit,\n    source: require(\"../../assets/login/paw.png\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 25\n    }\n  })))));\n}\n\nexport default EventBody;","map":{"version":3,"sources":["/home/user/Documentos/Git/App_PDS2/src/components/EventBody/index.js"],"names":["React","useState","useEffect","useRef","Picker","styles","Modal","Entypo","BackgroundImage","Ionicons","ImagePicker","EventBody","props","selectedImage","setSelectedImage","openImagePickerAsync","requestMediaLibraryPermissionsAsync","permissionResult","granted","alert","launchImageLibraryAsync","pickerResult","cancelled","count","length","uri","console","log","selectedValue","setSelectedValue","require","wlpBackground","backgroundColor","flex","titles","txtTitle","txtTitle2","body","txtOption","textArea","btnAddPhoto","height","width","containerImage","map","localUri","imgsContainer","btnAddEvent","color","iconButtonsubmit"],"mappings":"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","sourcesContent":["import React, { useState, useEffect,useRef } from 'react';\nimport { Image,View,Button,Text,TouchableOpacity, TextInput } from 'react-native';\nimport { Picker } from '@react-native-community/picker';\nimport styles from \"./styles\";\nimport Modal from 'react-native-modal';\nimport { Entypo } from \"@expo/vector-icons\";\nimport { ScrollView } from 'react-native';  \nimport { BackgroundImage } from 'react-native-elements/dist/config';\nimport { Ionicons } from \"@expo/vector-icons\";\nimport * as ImagePicker from 'expo-image-picker';\n\n\nfunction EventBody(props) {\n\n   \n    const [selectedImage, setSelectedImage] = useState([]);\n\n    let openImagePickerAsync = async () => {\n        let permissionResult = await ImagePicker.requestMediaLibraryPermissionsAsync();\n    \n        if (permissionResult.granted === false) {\n          alert(\"É necessário dar permissão para acessar a galeria\");\n          return;\n        }\n    \n        let pickerResult = await ImagePicker.launchImageLibraryAsync();\n\n        if (pickerResult.cancelled === true) {\n            return;\n        }\n        const count=\"localUri\"+selectedImage.length;\n\n        setSelectedImage((selectedImage)=>[...selectedImage,{ count: pickerResult.uri }]);\n        console.log(selectedImage.length);\n\n      }\n    const [selectedValue, setSelectedValue] = useState(\"java\");\n    return(\n  \n              <BackgroundImage source={ require(\"../../assets/LostPet/walpaper2.png\") } style={ styles(props).wlpBackground }>\n                <View style={{  backgroundColor: 'rgba(255, 255, 255, 0.90)',flex:1 }}>\n                  <View style={ styles(props).titles }>\n                    <Text style={ styles(props).txtTitle }>Preencha as informações do</Text>\n                    <Text style={ styles(props).txtTitle2 }>Evento!</Text>\n                  </View>\n                  <View style={styles(props).body }>\n                    <Text style={ styles(props).txtOption }>Informações</Text>\n                    <TextInput\n                      style={ styles(props).textArea }\n                      underlineColorAndroid=\"transparent\"\n                      placeholder=\"Informe alguns detalhes \"\n                      placeholderTextColor=\"grey\"\n                      numberOfLines={10}\n                      multiline={true}\n                    />\n                    <TouchableOpacity style={ styles(props).btnAddPhoto } onPress={openImagePickerAsync} >\n                      <Image \n\n                        style={{ height:24,width:24}}\n                        source={ require(\"../../assets/Events/camera.png\") }\n                                   \n                      />\n                    </TouchableOpacity>\n                    <View style={styles(props).containerImage}>\n                      <ScrollView horizontal={true} style={{ width: '94%' }}>\n                                          \n                      {\n                        selectedImage.map( localUri =>   \n                        <Image\n                          style={ styles(props).imgsContainer }\n                          key={ localUri.count }\n                          source={{ uri:localUri.count }}\n                        />\n                      )}\n                                          \n                      </ScrollView>  \n                    </View>\n                    \n                      <TouchableOpacity style={ styles(props).btnAddEvent }  >\n                        <Text style={{ color:'white' }}>Adicionar evento</Text> \n                        <Image style={ styles(props).iconButtonsubmit } source={require(\"../../assets/login/paw.png\")} />\n                      </TouchableOpacity>\n                      \n                  </View>\n                </View>\n              </BackgroundImage>\n             \n              \n    );\n}\nexport default EventBody;"]},"metadata":{},"sourceType":"module"}